merge_workspace: '/tmp/merge-workspace'
filters_def:
  merge_cmd:
    module: extras.filters.MergeCmdFilter
  redmine_resolve:
    module: extras.filters.ResolveRedmineFilter
    url: 'http://localhost'
    api_key: '1234'
  redmine_version:
    module: extras.filters.VersionRedmineFilter
    url: 'http://localhost'
    api_key: '1234'
  tests:
    module: extras.filters.TestsFilter
    path: 'tests'
  merge_approval:
    module: extras.filters.MergeRequestGitlabFilter
    url: 'http://localhost'
    token: '1234'
    project_id: 1
    title: 'Auto merge conflict {source} into {target}'
    user_id: 1
hooks_def:
  gitlab_merge_request:
    module: extras.hooks.ConflictMergeRequestGitlabHook
    url: 'http://localhost'
    token: '1234'
    project_id: 1
    title: 'Auto merge conflict {source} into {target}'
hooks:
  - gitlab_merge_request
dependencies:
  # Merge task branches into appropriate version branches
  # when resolved ('Resolve #\d+' cmd in commit message)
  # and mark redmine task as 'Resolved'
  '^(?P<task_id>\\d+)\\-.+$':
    filters:
      - redmine_resolve
      - merge_cmd
      - redmine_version
    targets:
      - v{redmine_version}
  # Merge version updates into next versions one-by-one
#      'v(?P<major>\\d+)\.(?P<minor>\\d+)':
  '^v\\d+\\.\\d+$':
    filters:
      - next_version
    targets:
      - v{next_version}
  # Update master branch with current stage
  # To release new version just change source branch and make push to it
  '^stage$':
    filters:
      - merge_approval
    targets:
      - master
  # Update stage branch with current version updates
  # To release new version just change source branch and make push to it
  '^v3\\.0$':
    targets:
      - stage
  # Update develop branch with current development version updates
  # To release new version just change source branch and make push to it
  '^v4\\.0$':
    targets:
      - develop
